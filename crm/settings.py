"""
import os
import psycopg2
import csv
from glob import glob

PATH = os.getcwd() + '/pluto_other/'
EXT = "*.csv"

def connect():
    # connecting to the database called test
    # using the connect function
    try:

        conn = psycopg2.connect(database="wow",
                                user="postgres",
                                password="Anita@12345",
                                host="localhost",
                                port="5432")

        # csvdataing the cursor object
        cur = conn.cursor()

    except (Exception, psycopg2.DatabaseError) as error:

        print ("Error while creating PostgreSQL table", error)

    # returing the conn and cur
    # objects to be used later
    return conn, cur

def create_table_cols():
    s = ""
    with open('D:\\scrapyproject/pluto_other\\BK_18v1.csv') as csvfile:
        reader = csv.reader(csvfile, delimiter=' ', quotechar='|')
        headerrow = next(reader)


    for i in headerrow:
        string = ' varchar (45) null'
    alist = i.split(',')
    my_new_list = [s + string for s in alist]
    getlength_of_cols = len(my_new_list)
    # Get cursor object from the database connection

    for i in my_new_list:
        s += i + ','
        sq = s[:-1]

    return sq,getlength_of_cols;

def checkTableExists(tablename):

    conn, cur = connect()

    try:
        cur.execute("SELECT count(*) FROM information_schema.tables WHERE table_name = '"+tablename.lower()+"'")

    except:
        print('error !')

    if cur.fetchone()[0] == 1:
        cur.close()
        return True
    cur.close()
    return False

def create_table(tablename):
    # drop table before importing the data
    result = checkTableExists(tablename)
    if result == 1:
        drop_table(tablename)
    else:
        # count no of columns in table
        create_cols ,getlength_of_cols = create_table_cols()
        # connect to the database.
        conn, cur = connect()

        try:
            cur.execute('CREATE TABLE '+tablename+' (' + create_cols + ')')
            print('Data imported in table ' + tablename + ' of csv ' + tablename + '.csv successfully !!!')
        except (Exception) as error:
            print('Their is some error or table ' +tablename+ ' is already created.')

        conn.commit()

def drop_table(tablename):
    conn, cur = connect()
    cur.execute("DROP TABLE " + tablename + ";")
    conn.commit()

def insert_data(tablename,restrowcsv):

    create_cols, getlength_of_cols = create_table_cols()
    s = '%s ,' * getlength_of_cols
    sq = s[:-2]

    conn, cur = connect()
    cur.execute(
        "INSERT INTO " + tablename + " VALUES ("+sq+")",
        restrowcsv
    )
    conn.commit()



def read_csv_files(tablename,file):

    with open(file,'r') as f:
        reader = csv.reader(f)
        header = next(reader)
        create_table(tablename)
        for restrowcsv in reader:
            print (restrowcsv)
            insert_data(tablename,restrowcsv)



all_csv_files = [file
                 for path, subdir, files in os.walk(PATH)
                 for file in glob(os.path.join(path, EXT))]

print (all_csv_files)
for l in all_csv_files:
    split_var = l.split("\\")
    poppedvar = split_var.pop()
    again_split = poppedvar.split('.')
    tablename = again_split[0]
    complete_path_of_file = PATH+tablename+'.csv'

    read_csv_files(tablename,complete_path_of_file)




Django settings for crm1 project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=@d3glg*4fluy-lc#!ks1ol9+oy4*5747=brlpans1=1^ia-nw'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #our app name
    'accounts',
    #for serach this has been installed
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crm1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crm1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = '/images/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

MEDIA_ROOT = os.path.join(BASE_DIR,'static/images')
